import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from xgboost import XGBRegressor
from sklearn.metrics import mean_squared_error
import plotly.express as px
from plotly import graph_objects as go
 
result = pd.DataFrame()
result2 = pd.DataFrame()
data1 = pd.read_csv("ML_x2.csv", engine='python',on_bad_lines='skip')
#print(data1)
#[index	YYYY	ICE	UNEMP	GOVT	RATEX	INCOME	INVAMT	STL5	LIR	E	GCE	EX	GDP_R	GDP 	U	I]


#print(data3.head())

#X = data1[['ICE','UNEMP', 'GOVT', 'RATEX', 'INCOME','INVAMT']]  #change here to switch to surney data
X = data1[['LIR','E', 'GCE', 'EX', 'U','I']]                     #change here to switch to world bank data
normalized_X=(X-X.mean())/X.std()
y = data1['gdp']
normalized_Y=(y-y.mean())/y.std()
year=data1['YYYY']
#print(X.head())
#print(normalized_X.head())

#print(data3.head())
#print(X.dtypes)
#print(data3.shape)

#X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
#n_X_train, n_X_test, n_y_train, n_y_test = train_test_split(normalized_X, y, test_size=0.2, random_state=42)
n_X_train=normalized_X[0:20]
n_y_train=normalized_Y[0:20]
n_X_test=normalized_X[20:25]
n_y_test=normalized_Y[20:25]
# Fit a linear regression model
#linear_model = LinearRegression()
#linear_model.fit(X_train, y_train)
#linear_pred = linear_model.predict(X_test)  
#print(n_X_train)
#print(n_y_train)

n_linear_model = LinearRegression()
n_linear_model.fit(n_X_train, n_y_train)
n_linear_fit = n_linear_model.predict(n_X_train)  
n_linear_pred = n_linear_model.predict(n_X_test)  
# Fit a random forest model
rf_model = RandomForestRegressor(n_estimators=200, random_state=42)
rf_model.fit(n_X_train, n_y_train)
rf_fit = rf_model.predict(n_X_train)
rf_pred = rf_model.predict(n_X_test)
# Fit an XGBoost model
xgb_model = XGBRegressor(n_estimators=200, random_state=42)
xgb_model.fit(n_X_train, n_y_train)
xgb_fit = xgb_model.predict(n_X_train)
xgb_pred = xgb_model.predict(n_X_test)
# Calculate mean squared error for each model
#linear_mse = mean_squared_error(y_test, linear_pred)
rf_fit_mse = mean_squared_error(n_y_train, rf_fit)
xgb_fit_mse = mean_squared_error(n_y_train, xgb_fit)
n_linear_fit_mse = mean_squared_error(n_y_train, n_linear_fit)

rf_mse = mean_squared_error(n_y_test, rf_pred)
xgb_mse = mean_squared_error(n_y_test, xgb_pred)
n_linear_mse = mean_squared_error(n_y_test, n_linear_pred)

# Print the results
#print(f"Linear regression MSE: {linear_mse}")
print(f"Linear regression fit n_MSE: {n_linear_fit_mse}")
print(f"Random forest fit MSE: {rf_fit_mse}")
print(f"XGBoost fit MSE: {xgb_fit_mse}")
print(f"Linear regression n_MSE: {n_linear_mse}")
print(f"Random forest MSE: {rf_mse}")
print(f"XGBoost MSE: {xgb_mse}")
print(f"Linear regression prediction: {xgb_mse}")

result['Y_fit_PREDICT']=n_linear_fit
result['Y_xgb_fit_PREDICT']=xgb_fit
result['Y_rf_fit_PREDICT']=rf_fit
result['actual_fit']=n_y_train

result2['Y_PREDICT']=n_linear_pred
result2['Y_xgb_PREDICT']=xgb_pred
result2['Y_rf_PREDICT']=rf_pred
result2['actual']=n_y_test
result2['year']=year[20:25]
print(f"prediction result: {result2}")
print(f"Actual GDP normalized: {n_y_test}")
#print(result)
#print(n_X_train)
#print(xgb_residuals.shape)
#data3 = pd.merge(left=data1, right=data2, left_on='YYYY', right_on='YYYY')
fig = px.line(data1, x='YYYY', y=normalized_Y,title="GDP Prediction based on world bank")                  #be aware of the title
fig.add_trace(go.Scatter(x=year[0:20], y=result['Y_fit_PREDICT'],name="linear Regression (train)"))
fig.add_trace(go.Scatter(x=year[0:20], y=result['Y_rf_fit_PREDICT'],name="RandomForest Regression (train)"))
fig.add_trace(go.Scatter(x=year[0:20], y=result['Y_xgb_fit_PREDICT'],name="XG Boost Regression (train)"))

fig.add_trace(go.Scatter(x=year[20:25], y=result2['Y_PREDICT'],name="linear Regression (test)"))
fig.add_trace(go.Scatter(x=year[20:25], y=result2['Y_rf_PREDICT'],name="RandomForest Regression (test)"))
fig.add_trace(go.Scatter(x=year[20:25], y=result2['Y_xgb_PREDICT'],name="XG Boost Regression (test)"))
fig.update_xaxes(title_text="year")
fig.update_yaxes(title_text="Normalized GDP")
#fig = px.line(result, x=result, y=data1['YYYY'][0:20])
fig.show()                                                    #might apply return to plot the figure


